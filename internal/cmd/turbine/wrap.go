package main

const wrap = "/// {{$p := .ReceiverTypePointer}}\n/// {{$r := .ReceiverIdentifier}}\n/// {{$t := .ReceiverTypeName}}\n\npackage __FIELD_ReceiverTypePackageName__\n\n/// {{if .InterfacePackageName}}import \"{{.InterfacePackageName}}\"{{end}}\n\n/// {{if false}}\ntype __FIELD_InterfaceName__ interface{}\ntype __FIELD_InterfacePackageQualifier____FIELD_InterfaceName__ interface{}\ntype __FIELD_ReceiverTypeReference____VAR_t__ struct{}\ntype __FIELD_ReceiverTypeName__ struct{}\ntype __VAR_p____VAR_t__ struct{} /// {{end}}\n\n/// {{if .InterfacePackageQualifier}}\nvar _ __FIELD_InterfacePackageQualifier____FIELD_InterfaceName__ = __FIELD_ReceiverTypeReference____VAR_t__{} /// {{else}}\nvar _ __FIELD_InterfaceName__ = &__FIELD_ReceiverTypeName__{}                                                 /// {{end}}\n\n/// {{define \"params\"}} {{range $i, $p := .ParamsGrouped}} {{if $i}}, {{end}} {{range $j, $n := $p.Names}} {{if $j}} , {{end}} {{$n}} {{end}} {{$p.Type}} {{end}} {{end}}\n/// {{define \"results\"}} {{if .ResultsGrouped}} {{if or (gt (len .ResultsGrouped) 1) (index .ResultsGrouped 0).Names}} ( {{end}} {{end}} {{range $i, $r := .ResultsGrouped}} {{if $i}}, {{end}} {{range $j, $n := $r.Names}} {{if $j}} , {{end}} {{$n}} {{end}} {{$r.Type}} {{end}} {{if .ResultsGrouped}} {{if or (gt (len .ResultsGrouped) 1) (index .ResultsGrouped 0).Names}} ) {{end}} {{end}} {{end}}\n/// {{define \"args\"}} {{range $i, $p := .ParamsFlat}} {{if $i}} , {{end}} {{$p.Name}} {{end}} {{end}}\n/// {{define \"body-none\"}} {{.Interface.ReceiverIdentifier}} .wrapped. {{.Name}} ( {{template \"args\" .}} ) {{end}}\n/// {{define \"body-many\"}} return {{.Interface.ReceiverIdentifier}} .wrapped. {{.Name}} ( {{template \"args\" .}} ) {{end}}\n/// {{define \"body\"}} {{if .ResultsFlat}} {{template \"body-many\" .}} {{else}} {{template \"body-none\" .}} {{end}} {{end}}\n\n/// {{range .InterfaceMethods}}\n/// {{range .Doc}}\n/// {{.}}{{end}}\nfunc (__VAR_r__ __VAR_p____VAR_t__) __FIELD_Name__( /** {{template \"params\" .}} **/ ) /** {{template \"results\" .}} **/ {\n\t/// {{template \"body\" .}}\n}\n\n/// {{end}}\n"
